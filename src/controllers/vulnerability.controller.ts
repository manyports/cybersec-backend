import { Request, Response } from 'express';
import { VulnerabilityRepository } from '../repositories/vulnerability.repository';
import { GithubParserService } from '../services/github-parser.service';
import { SploitusParserService } from '../services/sploitus-parser.service';

export class VulnerabilityController {
  constructor(
    private vulnerabilityRepository: VulnerabilityRepository,
    private githubParser: GithubParserService,
    private sploitusParser: SploitusParserService
  ) {}

  getVulnerabilities = async (req: Request, res: Response) => {
    try {
      const [githubVulns, sploitusVulns] = await Promise.all([
        this.githubParser.fetchVulnerabilities(),
        this.sploitusParser.fetchVulnerabilities()
      ]);
      
      const allVulnerabilities = [...githubVulns, ...sploitusVulns];
      res.json(allVulnerabilities);
    } catch (error) {
      res.status(500).json({ error: 'Failed to fetch vulnerabilities' });
    }
  };

  getGithubVulnerabilities = async (req: Request, res: Response) => {
    try {
      const vulnerabilities = await this.githubParser.fetchVulnerabilities();
      res.json(vulnerabilities);
    } catch (error) {
      res.status(500).json({ error: 'Failed to fetch GitHub vulnerabilities' });
    }
  };

  getSploitusVulnerabilities = async (req: Request, res: Response) => {
    try {
      const vulnerabilities = await this.sploitusParser.fetchVulnerabilities();
      res.json(vulnerabilities);
    } catch (error) {
      res.status(500).json({ error: 'Failed to fetch Sploitus vulnerabilities' });
    }
  };
} 